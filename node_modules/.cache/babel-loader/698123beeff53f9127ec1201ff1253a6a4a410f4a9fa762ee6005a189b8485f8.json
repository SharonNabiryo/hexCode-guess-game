{"ast":null,"code":"import _slicedToArray from\"/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from\"react\";import{useEffect,useState}from\"react\";// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ColorCodes(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),hexCode=_useState2[0],setHexCode=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),colorCodes=_useState4[0],setColorCodes=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isGameOver=_useState8[0],setIsGameOver=_useState8[1];function getHexCode(){var characters=\"0123456789ABCDEF\";var newHexCode=\"#\";for(var i=0;i<6;i++){var randomIndex=Math.floor(Math.random()*characters.length);// in this case, the each character is the random index\nnewHexCode+=characters.charAt(randomIndex);}return newHexCode;}function getColors(){var newColors=[];for(var i=0;i<3;i++){//   const randomHexCode = getHexCode();\nnewColors.push(getHexCode());// push the newHexCode into the newColors array but its found in the function getHexCode()\n}var randomIndex=Math.floor(Math.random()*newColors.length);// in this case, the color is the random index\nsetHexCode(newColors[randomIndex]);setColorCodes(newColors);}function userSelect(answer){if(answer===hexCode){setMessage(\"Correct!\");}else{setMessage(\"Incorrect!\");}setIsGameOver(true);}function handleClick(){getHexCode();getColors();setMessage(\"\");setIsGameOver(false);}useEffect(function(){getColors();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Color Code Game\"}),/*#__PURE__*/_jsx(\"span\",{children:hexCode}),/*#__PURE__*/_jsx(\"h2\",{children:\"Guess the color code!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"color-container\",style:{},children:colorCodes.map(function(color,index){return/*#__PURE__*/_jsx(\"div\",{className:\"color\",onClick:function onClick(){return isGameOver?null:userSelect(color);},style:{backgroundColor:color,width:\"100px\",height:\"100px\",display:\"flex\",flexDirection:\"row\"}},index);})}),message&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:message}),/*#__PURE__*/_jsx(\"button\",{onClick:handleClick,children:\"Play Again\"})]})]});}","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","ColorCodes","_useState","_useState2","_slicedToArray","hexCode","setHexCode","_useState3","_useState4","colorCodes","setColorCodes","_useState5","_useState6","message","setMessage","_useState7","_useState8","isGameOver","setIsGameOver","getHexCode","characters","newHexCode","i","randomIndex","Math","floor","random","length","charAt","getColors","newColors","push","userSelect","answer","handleClick","className","children","style","map","color","index","onClick","backgroundColor","width","height","display","flexDirection"],"sources":["/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/src/components/ColorCodes.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\n\nexport default function ColorCodes() {\n  const [hexCode, setHexCode] = useState(\"\");\n  const [colorCodes, setColorCodes] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  function getHexCode() {\n    const characters = \"0123456789ABCDEF\";\n    let newHexCode = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length); // in this case, the each character is the random index\n      newHexCode += characters.charAt(randomIndex);\n    }\n    return newHexCode;\n  }\n\n  function getColors() {\n    const newColors = [];\n\n    for (let i = 0; i < 3; i++) {\n      //   const randomHexCode = getHexCode();\n      newColors.push(getHexCode()); // push the newHexCode into the newColors array but its found in the function getHexCode()\n    }\n    const randomIndex = Math.floor(Math.random() * newColors.length); // in this case, the color is the random index\n\n    setHexCode(newColors[randomIndex]);\n    setColorCodes(newColors);\n  }\n\n  function userSelect(answer) {\n    if (answer === hexCode) {\n      setMessage(\"Correct!\");\n    } else {\n      setMessage(\"Incorrect!\");\n    }\n    setIsGameOver(true);\n  }\n\n  function handleClick() {\n    getHexCode();\n    getColors();\n    setMessage(\"\");\n    setIsGameOver(false);\n  }\n\n  useEffect(() => {\n    getColors();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1>Color Code Game</h1>\n      <span>{hexCode}</span>\n\n      <h2>Guess the color code!</h2>\n      <div className=\"color-container\" style={{}}>\n        {colorCodes.map((color, index) => {\n          return (\n            <div\n              className=\"color\"\n              key={index}\n              onClick={() => (isGameOver ? null : userSelect(color))}\n              style={{\n                backgroundColor: color,\n                width: \"100px\",\n                height: \"100px\",\n                display: \"flex\",\n                flexDirection: \"row\",\n              }}\n            ></div>\n          );\n        })}\n      </div>\n      {message && (\n        <div>\n          <p>{message}</p>\n          <button onClick={handleClick}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}