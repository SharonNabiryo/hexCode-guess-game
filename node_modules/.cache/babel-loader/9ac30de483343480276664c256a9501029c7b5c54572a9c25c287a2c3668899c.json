{"ast":null,"code":"var _jsxFileName = \"/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/src/components/ColorCodes.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ColorCodes() {\n  _s();\n  const [hexCode, setHexCode] = useState(\"\");\n  const [colorCodes, setColorCodes] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playAgain, setPlayAgain] = useState(false);\n  function getHexCode() {\n    const characters = \"0123456789ABCDEF\";\n    let newHexCode = \"#\";\n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length); // in this case, the each character is the random index\n      newHexCode += characters.charAt(randomIndex);\n    }\n    return newHexCode;\n  }\n  function getColors() {\n    const newColors = [];\n    for (let i = 0; i < 3; i++) {\n      //   const randomHexCode = getHexCode();\n      newColors.push(getHexCode()); // push the newHexCode into the newColors array but its found in the function getHexCode()\n    }\n\n    const randomIndex = Math.floor(Math.random() * newColors.length); // in this case, the color is the random index\n\n    setHexCode(newColors[randomIndex]);\n    setColorCodes(newColors);\n  }\n  function userSelect(answer) {\n    if (answer === hexCode) {\n      setMessage(\"Correct!\");\n    } else {\n      setMessage(\"Incorrect!\");\n    }\n    setPlayAgain(true);\n  }\n  useEffect(() => {\n    getColors();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Color Code Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: colorCodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Guess the color code!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {},\n      children: colorCodes.map((color, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: \"color\",\n            width: \"100px\",\n            height: \"100px\"\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(ColorCodes, \"jaBQOUDHasnIND8MOxky9uIqt8s=\");\n_c = ColorCodes;\nvar _c;\n$RefreshReg$(_c, \"ColorCodes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ColorCodes","_s","hexCode","setHexCode","colorCodes","setColorCodes","message","setMessage","playAgain","setPlayAgain","getHexCode","characters","newHexCode","i","randomIndex","Math","floor","random","length","charAt","getColors","newColors","push","userSelect","answer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","map","color","index","backgroundColor","width","height","_c","$RefreshReg$"],"sources":["/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/src/components/ColorCodes.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\n\nexport default function ColorCodes() {\n  const [hexCode, setHexCode] = useState(\"\");\n  const [colorCodes, setColorCodes] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playAgain, setPlayAgain] = useState(false);\n\n  function getHexCode() {\n    const characters = \"0123456789ABCDEF\";\n    let newHexCode = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length); // in this case, the each character is the random index\n      newHexCode += characters.charAt(randomIndex);\n    }\n    return newHexCode;\n  }\n\n  function getColors() {\n    const newColors = [];\n\n    for (let i = 0; i < 3; i++) {\n      //   const randomHexCode = getHexCode();\n      newColors.push(getHexCode()); // push the newHexCode into the newColors array but its found in the function getHexCode()\n    }\n    const randomIndex = Math.floor(Math.random() * newColors.length); // in this case, the color is the random index\n\n    setHexCode(newColors[randomIndex]);\n    setColorCodes(newColors);\n  }\n  function userSelect(answer) {\n    if (answer === hexCode) {\n      setMessage(\"Correct!\");\n    } else {\n      setMessage(\"Incorrect!\");\n    }\n    setPlayAgain(true);\n  }\n\n  useEffect(() => {\n    getColors();\n  }, []);\n\n  return (\n    <div>\n      <h1>Color Code Game</h1>\n      <span>{colorCodes}</span>\n\n      <h2>Guess the color code!</h2>\n      <div className=\"container\" style={{}}>\n        {colorCodes.map((color, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"color\",\n                width: \"100px\",\n                height: \"100px\",\n              }}\n            ></div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjD,SAASa,UAAUA,CAAA,EAAG;IACpB,MAAMC,UAAU,GAAG,kBAAkB;IACrC,IAAIC,UAAU,GAAG,GAAG;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,UAAU,CAACO,MAAM,CAAC,CAAC,CAAC;MACnEN,UAAU,IAAID,UAAU,CAACQ,MAAM,CAACL,WAAW,CAAC;IAC9C;IACA,OAAOF,UAAU;EACnB;EAEA,SAASQ,SAASA,CAAA,EAAG;IACnB,MAAMC,SAAS,GAAG,EAAE;IAEpB,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B;MACAQ,SAAS,CAACC,IAAI,CAACZ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC;;IACA,MAAMI,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGI,SAAS,CAACH,MAAM,CAAC,CAAC,CAAC;;IAElEf,UAAU,CAACkB,SAAS,CAACP,WAAW,CAAC,CAAC;IAClCT,aAAa,CAACgB,SAAS,CAAC;EAC1B;EACA,SAASE,UAAUA,CAACC,MAAM,EAAE;IAC1B,IAAIA,MAAM,KAAKtB,OAAO,EAAE;MACtBK,UAAU,CAAC,UAAU,CAAC;IACxB,CAAC,MAAM;MACLA,UAAU,CAAC,YAAY,CAAC;IAC1B;IACAE,YAAY,CAAC,IAAI,CAAC;EACpB;EAEAb,SAAS,CAAC,MAAM;IACdwB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB9B,OAAA;MAAA0B,QAAA,EAAOrB;IAAU;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAEzB9B,OAAA;MAAA0B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B9B,OAAA;MAAK+B,SAAS,EAAC,WAAW;MAACC,KAAK,EAAE,CAAC,CAAE;MAAAN,QAAA,EAClCrB,UAAU,CAAC4B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAChC,oBACEnC,OAAA;UAEEgC,KAAK,EAAE;YACLI,eAAe,EAAE,OAAO;YACxBC,KAAK,EAAE,OAAO;YACdC,MAAM,EAAE;UACV;QAAE,GALGH,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMN,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CAhEuBD,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}