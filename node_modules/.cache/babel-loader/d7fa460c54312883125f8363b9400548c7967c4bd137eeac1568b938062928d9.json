{"ast":null,"code":"var _jsxFileName = \"/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/src/components/ColorCodes.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ColorCodes() {\n  _s();\n  const [hexCode, setHexCode] = useState(\"\");\n  const [colorCodes, setColorCodes] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playAgain, setPlayAgain] = useState(false);\n  function getHexCode() {\n    const characters = \"0123456789ABCDEF\";\n    let newHexCode = \"#\";\n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      newHexCode += characters.charAt(randomIndex);\n    }\n    console.log(newHexCode);\n  }\n  getHexCode();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Color Code Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Guess the color code!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(ColorCodes, \"3td+ueXuLJMjkz78in1PXeQixxw=\");\n_c = ColorCodes;\nvar _c;\n$RefreshReg$(_c, \"ColorCodes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ColorCodes","_s","hexCode","setHexCode","colorCodes","setColorCodes","message","setMessage","playAgain","setPlayAgain","getHexCode","characters","newHexCode","i","randomIndex","Math","floor","random","length","charAt","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sharongless/Desktop/PROJECTS/hexCode Guess Game/hexCode-guess-game/hexcode-guess-game/src/components/ColorCodes.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\n// Build a game called Color Codes that displays a random color code HEX and asks the user to select which color it is.\n// It should display 3 colored boxes, and the user should be able to click on one of them to select their answer.\n// If the user selects the correct color, it should display a message saying \"Correct!\" and if they select the wrong color,\n// it should display a message saying \"Incorrect!\".\n// After each selection display a button to play again with the text \"Play Again\".\n// When the user clicks the play again button, it should generate a new color code and new colored boxes,\n// and they should be able to start the game again.\n// To add styles, you can use the inline style property\n// <div style={{ background: \"#000000\" }}>...</div>\n// Criteria\n// 1. The colored boxes should be displayed below the color code, and should be 100px by 100px in size.\n// 2. The user should be able to click on one of the colored boxes to select their answer, ending the game.\n// 3. If the user selects the correct color, it should display a message saying Correct! and a button to play again.\n// 4. If the user selects the wrong color, it should display a message saying \"Incorrect!\" and a button to play again.\n// 5. When the user clicks the play again button Play Again, it should generate a new color code and new colored boxes.\n// 6. The container for the colored boxes should have a data-testid of color-container.\n// 7. The colored boxes should have a data-testid of correct-color if it is the correct color,\n// and incorrect-color if it is not the correct color.\n// Note: Without the data-testid properties, your tests will fail.\n\nexport default function ColorCodes() {\n  const [hexCode, setHexCode] = useState(\"\");\n  const [colorCodes, setColorCodes] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [playAgain, setPlayAgain] = useState(false);\n\n  function getHexCode() {\n    const characters = \"0123456789ABCDEF\";\n    let newHexCode = \"#\";\n\n    for (let i = 0; i < 6; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      newHexCode += characters.charAt(randomIndex);\n    }\n    console.log(newHexCode);\n  }\n  getHexCode();\n\n  return (\n    <div>\n      <h1>Color Code Game</h1>\n\n      <h2>Guess the color code!</h2>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEjD,SAASa,UAAUA,CAAA,EAAG;IACpB,MAAMC,UAAU,GAAG,kBAAkB;IACrC,IAAIC,UAAU,GAAG,GAAG;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,UAAU,CAACO,MAAM,CAAC;MACjEN,UAAU,IAAID,UAAU,CAACQ,MAAM,CAACL,WAAW,CAAC;IAC9C;IACAM,OAAO,CAACC,GAAG,CAACT,UAAU,CAAC;EACzB;EACAF,UAAU,CAAC,CAAC;EAEZ,oBACEX,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAExB3B,OAAA;MAAAuB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAACzB,EAAA,CAzBuBD,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}